trigger:
- dev

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: '140c7113-db46-417a-8ed7-c019ced14ba0'
  imageRepository: 'azurecapstone'
  containerRegistry: 'forzacapstondockerregistryconnection.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: 'dev-$(Build.BuildId)'

  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
      fetchDepth: 0

    - script: |
        echo "Cleaning workspace..."
        git clean -fdx
      displayName: 'Clean Workspace'

    - script: |
        echo "Listing source directory contents"
        ls -la $(Build.SourcesDirectory)
      displayName: 'List source directory contents'

    - script: |
        echo "Printing git log"
        git log -n 5
      displayName: 'Print git log'

    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'clean package -Dmaven.test.skip=true'
        
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: Dev
  displayName: Dev
  dependsOn: Build
  jobs:
  - job: DeployToDev
    displayName: Deploy to Dev
    pool:
      vmImage: $(vmImageName)
    environment: 
      name: Dev  # Reference the environment with approval checks
    steps:
    - task: TerraformInstaller@2
      inputs:
        terraformVersion: 'latest'

    - task: TerraformCLI@2
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Infra-Folder'
        backendType: 'azurerm'
        backendServiceArm: 'ForzaAzureRMConnection'
        backendAzureRmResourceGroupName: 'ForzaCapstoneResourceGroup'
        backendAzureRmResourceGroupLocation: 'eastus'
        backendAzureRmStorageAccountName: 'forzadevopstfjava'
        backendAzureRmContainerName: 'forzacapstoneaksjavadevops'
        backendAzureRmKey: 'terraform.tfstate'
        allowTelemetryCollection: false

    - task: TerraformCLI@2
      inputs:
        command: 'plan'
        environmentServiceName: 'ForzaAzureRMConnection'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Infra-Folder'
        runAzLogin: true
        allowTelemetryCollection: false
              
    - task: TerraformCLI@2
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Infra-Folder'
        environmentServiceName: 'ForzaAzureRMConnection'
        allowTelemetryCollection: false

    - task: KubernetesManifest@1
      inputs:
        action: 'deploy'
        connectionType: 'azureResourceManager'
        azureSubscriptionConnection: 'ForzaAzureRMConnection'
        azureResourceGroup: 'ForzaCapstoneResourceGroup'
        kubernetesCluster: 'ForzaCapstoneAKSCluster-java'
        useClusterAdmin: true
        manifests: '$(System.DefaultWorkingDirectory)/Infra-Folder/deployment.yaml'
        namespace: 'dev-environment'
